{"version":3,"sources":["core/services/google-maps-api-wrapper.ts"],"names":[],"mappings":"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","file":"core/services/google-maps-api-wrapper.js","sourcesContent":["import {Injectable, NgZone} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport * as mapTypes from './google-maps-types';\nimport {MapsAPILoader} from './maps-api-loader/maps-api-loader';\n\n// todo: add types for this\ndeclare var google: any;\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n@Injectable()\nexport class GoogleMapsAPIWrapper {\n  private _map: Promise<mapTypes.GoogleMap>;\n  private _mapResolver: (value?: mapTypes.GoogleMap) => void;\n\n  constructor(private _loader: MapsAPILoader, private _zone: NgZone) {\n    this._map =\n        new Promise<mapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\n  }\n\n  createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void> {\n    return this._loader.load().then(() => {\n      const map = new google.maps.Map(el, mapOptions);\n      this._mapResolver(<mapTypes.GoogleMap>map);\n      return;\n    });\n  }\n\n  setMapOptions(options: mapTypes.MapOptions) {\n    this._map.then((m: mapTypes.GoogleMap) => { m.setOptions(options); });\n  }\n\n  /**\n   * Creates a google map marker with the map context\n   */\n  createMarker(options: mapTypes.MarkerOptions = <mapTypes.MarkerOptions>{}):\n      Promise<mapTypes.Marker> {\n    return this._map.then((map: mapTypes.GoogleMap) => {\n      options.map = map;\n      return new google.maps.Marker(options);\n    });\n  }\n\n  createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow> {\n    return this._map.then(() => { return new google.maps.InfoWindow(options); });\n  }\n\n  /**\n   * Creates a google.map.Circle for the current map.\n   */\n  createCircle(options: mapTypes.CircleOptions): Promise<mapTypes.Circle> {\n    return this._map.then((map: mapTypes.GoogleMap) => {\n      options.map = map;\n      return new google.maps.Circle(options);\n    });\n  }\n\n  subscribeToMapEvent<E>(eventName: string): Observable<E> {\n    return Observable.create((observer: Observer<E>) => {\n      this._map.then((m: mapTypes.GoogleMap) => {\n        m.addListener(eventName, (arg: E) => { this._zone.run(() => observer.next(arg)); });\n      });\n    });\n  }\n\n  setCenter(latLng: mapTypes.LatLngLiteral): Promise<void> {\n    return this._map.then((map: mapTypes.GoogleMap) => map.setCenter(latLng));\n  }\n\n  getZoom(): Promise<number> { return this._map.then((map: mapTypes.GoogleMap) => map.getZoom()); }\n\n  getBounds(): Promise<mapTypes.LatLngBounds> {\n    return this._map.then((map: mapTypes.GoogleMap) => map.getBounds());\n  }\n\n  setZoom(zoom: number): Promise<void> {\n    return this._map.then((map: mapTypes.GoogleMap) => map.setZoom(zoom));\n  }\n\n  getCenter(): Promise<mapTypes.LatLng> {\n    return this._map.then((map: mapTypes.GoogleMap) => map.getCenter());\n  }\n\n  panTo(latLng: mapTypes.LatLng|mapTypes.LatLngLiteral): Promise<void> {\n    return this._map.then((map) => map.panTo(latLng));\n  }\n\n  /**\n   * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n   */\n  getNativeMap(): Promise<mapTypes.GoogleMap> { return this._map; }\n\n  /**\n   * Triggers the given event name on the map instance.\n   */\n  triggerMapEvent(eventName: string): Promise<void> {\n    return this._map.then((m) => google.maps.event.trigger(m, eventName));\n  }\n}\n"],"sourceRoot":"/source/"}