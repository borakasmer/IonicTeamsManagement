{"version":3,"sources":["core/services/maps-api-loader/lazy-maps-api-loader.ts"],"names":[],"mappings":"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","file":"core/services/maps-api-loader/lazy-maps-api-loader.js","sourcesContent":["import {Inject, Injectable, Optional, Provider, provide} from '@angular/core';\n\nimport {DOCUMENT_GLOBAL, WINDOW_GLOBAL} from '../../utils/browser-globals';\n\nimport {MapsAPILoader} from './maps-api-loader';\n\nexport enum GoogleMapsScriptProtocol {\n  HTTP,\n  HTTPS,\n  AUTO\n}\n\n/**\n * Config literal used to create an instance of LazyMapsAPILoaderConfig.\n */\nexport interface LazyMapsAPILoaderConfigLiteral {\n  /**\n   * The Google Maps API Key (see:\n   * https://developers.google.com/maps/documentation/javascript/get-api-key)\n   */\n  apiKey?: string;\n\n  /**\n   * The Google Maps client ID (for premium plans).\n   * When you have a Google Maps APIs Premium Plan license, you must authenticate\n   * your application with either an API key or a client ID.\n   * The Google Maps API will fail to load if both a client ID and an API key are included.\n   */\n  clientId?: string;\n\n  /**\n   * The Google Maps channel name (for premium plans).\n   * A channel parameter is an optional parameter that allows you to track usage under your client\n   * ID by assigning a distinct channel to each of your applications.\n   */\n  channel?: string;\n\n  /**\n   * Google Maps API version.\n   */\n  apiVersion?: string;\n\n  /**\n   * Host and Path used for the `<script>` tag.\n   */\n  hostAndPath?: string;\n\n  /**\n   * Protocol used for the `<script>` tag.\n   */\n  protocol?: GoogleMapsScriptProtocol;\n\n  /**\n   * Defines which Google Maps libraries should get loaded.\n   */\n  libraries?: string[];\n\n  /**\n   * The default bias for the map behavior is US.\n   * If you wish to alter your application to serve different map tiles or bias the\n   * application, you can overwrite the default behavior (US) by defining a `region`.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Region\n   */\n  region?: string;\n\n  /**\n   * The Google Maps API uses the browser's preferred language when displaying\n   * textual information. If you wish to overwrite this behavior and force the API\n   * to use a given language, you can use this setting.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Language\n   */\n  language?: string;\n}\n\n/**\n * Configuration for {@link LazyMapsAPILoader}.\n * See {@link LazyMapsAPILoaderConfig} for instance attribute descriptions.\n */\nexport class LazyMapsAPILoaderConfig implements LazyMapsAPILoaderConfigLiteral {\n  apiKey: string = null;\n  clientId: string = null;\n  channel: string = null;\n  apiVersion: string = '3';\n  hostAndPath: string = 'maps.googleapis.com/maps/api/js';\n  protocol: GoogleMapsScriptProtocol = GoogleMapsScriptProtocol.HTTPS;\n  libraries: string[] = [];\n  region: string = null;\n  language: string = null;\n}\n\nconst DEFAULT_CONFIGURATION = new LazyMapsAPILoaderConfig();\n\n@Injectable()\nexport class LazyMapsAPILoader extends MapsAPILoader {\n  private _scriptLoadingPromise: Promise<void>;\n  private _config: LazyMapsAPILoaderConfig;\n  private _window: Window;\n  private _document: Document;\n\n  constructor(\n      @Optional() config: LazyMapsAPILoaderConfig, @Inject(WINDOW_GLOBAL) w: Window,\n      @Inject(DOCUMENT_GLOBAL) d: Document) {\n    super();\n    this._config = config || DEFAULT_CONFIGURATION;\n    this._window = w;\n    this._document = d;\n  }\n\n  load(): Promise<void> {\n    if (this._scriptLoadingPromise) {\n      return this._scriptLoadingPromise;\n    }\n\n    const script = this._document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    const callbackName: string = `angular2GoogleMapsLazyMapsAPILoader`;\n    script.src = this._getScriptSrc(callbackName);\n\n    this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\n      (<any>this._window)[callbackName] = () => { resolve(); };\n\n      script.onerror = (error: Event) => { reject(error); };\n    });\n\n    this._document.body.appendChild(script);\n    return this._scriptLoadingPromise;\n  }\n\n  private _getScriptSrc(callbackName: string): string {\n    let protocolType: GoogleMapsScriptProtocol =\n        (this._config && this._config.protocol) || DEFAULT_CONFIGURATION.protocol;\n    let protocol: string;\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.AUTO:\n        protocol = '';\n        break;\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath: string = this._config.hostAndPath || DEFAULT_CONFIGURATION.hostAndPath;\n    const queryParams: {[key: string]: string | Array<string>} = {\n      v: this._config.apiVersion || DEFAULT_CONFIGURATION.apiVersion,\n      callback: callbackName,\n      key: this._config.apiKey,\n      client: this._config.clientId,\n      channel: this._config.channel,\n      libraries: this._config.libraries,\n      region: this._config.region,\n      language: this._config.language\n    };\n    const params: string =\n        Object.keys(queryParams)\n            .filter((k: string) => queryParams[k] != null)\n            .filter((k: string) => {\n              // remove empty arrays\n              return !Array.isArray(queryParams[k]) ||\n                  (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n            })\n            .map((k: string) => {\n              // join arrays as comma seperated strings\n              let i = queryParams[k];\n              if (Array.isArray(i)) {\n                return {key: k, value: i.join(',')};\n              }\n              return {key: k, value: queryParams[k]};\n            })\n            .map((entry: {key: string, value: string}) => { return `${entry.key}=${entry.value}`; })\n            .join('&');\n    return `${protocol}//${hostAndPath}?${params}`;\n  }\n}\n\n/**\n * Creates a provider for a {@link LazyMapsAPILoaderConfig})\n */\nexport function provideLazyMapsAPILoaderConfig(confLiteral: LazyMapsAPILoaderConfigLiteral):\n    Provider {\n  return provide(LazyMapsAPILoaderConfig, {\n    useFactory: () => {\n      const config = new LazyMapsAPILoaderConfig();\n      // todo(sebastian): deprecate LazyMapsAPILoader class\n      config.apiKey = confLiteral.apiKey || DEFAULT_CONFIGURATION.apiKey;\n      config.apiVersion = confLiteral.apiVersion || DEFAULT_CONFIGURATION.apiVersion;\n      config.channel = confLiteral.channel || DEFAULT_CONFIGURATION.channel;\n      config.clientId = confLiteral.clientId || DEFAULT_CONFIGURATION.clientId;\n      config.hostAndPath = confLiteral.hostAndPath || DEFAULT_CONFIGURATION.hostAndPath;\n      config.language = confLiteral.language || DEFAULT_CONFIGURATION.language;\n      config.libraries = confLiteral.libraries || DEFAULT_CONFIGURATION.libraries;\n      config.protocol = config.protocol || DEFAULT_CONFIGURATION.protocol;\n      config.region = config.region || DEFAULT_CONFIGURATION.region;\n      return config;\n    }\n  });\n}\n"],"sourceRoot":"/source/"}