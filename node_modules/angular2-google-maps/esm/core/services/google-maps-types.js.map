{"version":3,"sources":["core/services/google-maps-types.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,IAAI,MAAW,CAAC","file":"core/services/google-maps-types.js","sourcesContent":["export var google: any;\n\nexport interface GoogleMap {\n  constructor(el: HTMLElement, opts?: MapOptions): void;\n  panTo(latLng: LatLng|LatLngLiteral): void;\n  setZoom(zoom: number): void;\n  addListener(eventName: string, fn: Function): void;\n  getCenter(): LatLng;\n  setCenter(latLng: LatLng|LatLngLiteral): void;\n  getBounds(): LatLngBounds;\n  getZoom(): number;\n  setOptions(options: MapOptions): void;\n}\n\nexport interface LatLng {\n  constructor(lat: number, lng: number): void;\n  lat(): number;\n  lng(): number;\n}\n\nexport interface Marker extends MVCObject {\n  constructor(options?: MarkerOptions): void;\n  setMap(map: GoogleMap): void;\n  setPosition(latLng: LatLng|LatLngLiteral): void;\n  setTitle(title: string): void;\n  setLabel(label: string|MarkerLabel): void;\n  setDraggable(draggable: boolean): void;\n  setIcon(icon: string): void;\n  getLabel(): MarkerLabel;\n}\n\nexport interface MarkerOptions {\n  position: LatLng|LatLngLiteral;\n  title?: string;\n  map?: GoogleMap;\n  label?: string|MarkerLabel;\n  draggable?: boolean;\n  icon?: string;\n}\n\nexport interface MarkerLabel {\n  color: string;\n  fontFamily: string;\n  fontSize: string;\n  fontWeight: string;\n  text: string;\n}\n\nexport interface Circle extends MVCObject {\n  getBounds(): LatLngBounds;\n  getCenter(): LatLng;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getRadius(): number;\n  getVisible(): boolean;\n  setCenter(center: LatLng|LatLngLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: CircleOptions): void;\n  setRadius(radius: number): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface CircleOptions {\n  center?: LatLng|LatLngLiteral;\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  map?: GoogleMap;\n  radius?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokePosition?: 'CENTER'|'INSIDE'|'OUTSIDE';\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface LatLngBounds {\n  contains(latLng: LatLng): boolean;\n  equals(other: LatLngBounds|LatLngBoundsLiteral): boolean;\n  extend(point: LatLng): void;\n  getCenter(): LatLng;\n  getNorthEast(): LatLng;\n  getSouthWest(): LatLng;\n  intersects(other: LatLngBounds|LatLngBoundsLiteral): boolean;\n  isEmpty(): boolean;\n  toJSON(): LatLngBoundsLiteral;\n  toSpan(): LatLng;\n  toString(): string;\n  toUrlValue(precision?: number): string;\n  union(other: LatLngBounds|LatLngBoundsLiteral): LatLngBounds;\n}\n\nexport interface LatLngBoundsLiteral {\n  east: number;\n  north: number;\n  south: number;\n  west: number;\n}\n\nexport interface LatLngLiteral {\n  lat: number;\n  lng: number;\n}\n\nexport interface MouseEvent { latLng: LatLng; }\n\nexport interface MapOptions {\n  center?: LatLng|LatLngLiteral;\n  zoom?: number;\n  disableDoubleClickZoom?: boolean;\n  disableDefaultUI?: boolean;\n  backgroundColor?: string;\n  draggableCursor?: string;\n  draggingCursor?: string;\n  keyboardShortcuts?: boolean;\n  zoomControl?: boolean;\n  styles?: MapTypeStyle[];\n  streetViewControl?: boolean;\n}\n\nexport interface MapTypeStyle {\n  elementType: 'all'|'geometry'|'geometry.fill'|'geometry.stroke'|'labels'|'labels.icon'|\n      'labels.text'|'labels.text.fill'|'labels.text.stroke';\n  featureType: 'administrative'|'administrative.country'|'administrative.land_parcel'|\n      'administrative.locality'|'administrative.neighborhood'|'administrative.province'|'all'|\n      'landscape'|'landscape.man_made'|'landscape.natural'|'landscape.natural.landcover'|\n      'landscape.natural.terrain'|'poi'|'poi.attraction'|'poi.business'|'poi.government'|\n      'poi.medical'|'poi.park'|'poi.place_of_worship'|'poi.school'|'poi.sports_complex'|'road'|\n      'road.arterial'|'road.highway'|'road.highway.controlled_access'|'road.local'|'transit'|\n      'transit.line'|'transit.station'|'transit.station.airport'|'transit.station.bus'|\n      'transit.station.rail'|'water';\n  stylers: MapTypeStyler[];\n}\n\n/**\n *  If more than one key is specified in a single MapTypeStyler, all but one will be ignored.\n */\nexport interface MapTypeStyler {\n  color?: string;\n  gamma?: number;\n  hue?: string;\n  invert_lightness?: boolean;\n  lightness?: number;\n  saturation?: number;\n  visibility?: string;\n  weight?: number;\n}\n\nexport interface InfoWindow {\n  constructor(opts?: InfoWindowOptions): void;\n  close(): void;\n  getContent(): string|Node;\n  getPosition(): LatLng;\n  getZIndex(): number;\n  open(map?: GoogleMap, anchor?: MVCObject): void;\n  setContent(content: string|Node): void;\n  setOptions(options: InfoWindowOptions): void;\n  setPosition(position: LatLng|LatLngLiteral): void;\n  setZIndex(zIndex: number): void;\n}\n\nexport interface MVCObject {\n  constructor(): void;\n  addListener(eventName: string, handler: Function): MapsEventListener;\n}\n\nexport interface MapsEventListener { remove(): void; }\n\nexport interface Size {\n  height: number;\n  width: number;\n  constructor(width: number, height: number, widthUnit?: string, heightUnit?: string): void;\n  equals(other: Size): boolean;\n  toString(): string;\n}\n\nexport interface InfoWindowOptions {\n  content?: string|Node;\n  disableAutoPan?: boolean;\n  maxWidth?: number;\n  pixelOffset?: Size;\n  position?: LatLng|LatLngLiteral;\n  zIndex?: number;\n}\n"],"sourceRoot":"/source/"}