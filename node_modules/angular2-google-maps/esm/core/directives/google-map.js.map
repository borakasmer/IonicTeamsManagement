{"version":3,"sources":["core/directives/google-map.ts"],"names":[],"mappings":"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","file":"core/directives/google-map.js","sourcesContent":["import {Component, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChange} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {MouseEvent} from '../events';\nimport {GoogleMapsAPIWrapper} from '../services/google-maps-api-wrapper';\nimport {LatLng, LatLngLiteral} from '../services/google-maps-types';\nimport {LatLngBounds, MapTypeStyle} from '../services/google-maps-types';\nimport {CircleManager} from '../services/managers/circle-manager';\nimport {InfoWindowManager} from '../services/managers/info-window-manager';\nimport {MarkerManager} from '../services/managers/marker-manager';\n\n/**\n * SebMGoogleMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the CSS\n * class `sebm-google-map-container`.\n *\n * ### Example\n * ```typescript\n * import {Component} from '@angular/core';\n * import {SebmGoogleMap} from 'angular2-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [SebmGoogleMap],\n *  styles: [`\n *    .sebm-google-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </sebm-google-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'sebm-google-map',\n  providers: [GoogleMapsAPIWrapper, MarkerManager, InfoWindowManager, CircleManager],\n  inputs: [\n    'longitude', 'latitude', 'zoom', 'disableDoubleClickZoom', 'disableDefaultUI', 'scrollwheel',\n    'backgroundColor', 'draggableCursor', 'draggingCursor', 'keyboardShortcuts', 'zoomControl',\n    'styles', 'usePanning', 'streetViewControl'\n  ],\n  outputs: ['mapClick', 'mapRightClick', 'mapDblClick', 'centerChange', 'idle', 'boundsChange'],\n  host: {'[class.sebm-google-map-container]': 'true'},\n  styles: [`\n    .sebm-google-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .sebm-google-map-content {\n      display:none;\n    }\n  `],\n  template: `\n    <div class='sebm-google-map-container-inner'></div>\n    <div class='sebm-google-map-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class SebmGoogleMap implements OnChanges,\n    OnInit {\n  /**\n   * The longitude that defines the center of the map.\n   */\n  longitude: number = 0;\n\n  /**\n   * The latitude that defines the center of the map.\n   */\n  latitude: number = 0;\n\n  /**\n   * The zoom level of the map. The default zoom level is 8.\n   */\n  zoom: number = 8;\n\n  /**\n   * Enables/disables zoom and center on double click. Enabled by default.\n   */\n  disableDoubleClickZoom: boolean = false;\n\n  /**\n   * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n   * value cannot get updated.\n   */\n  disableDefaultUI: boolean = false;\n\n  /**\n   * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n   */\n  scrollwheel: boolean = true;\n\n  /**\n   * Color used for the background of the Map div. This color will be visible when tiles have not\n   * yet loaded as the user pans. This option can only be set when the map is initialized.\n   */\n  backgroundColor: string;\n\n  /**\n   * The name or url of the cursor to display when mousing over a draggable map. This property uses\n   * the css  * cursor attribute to change the icon. As with the css property, you must specify at\n   * least one fallback cursor that is not a URL. For example:\n   * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  draggableCursor: string;\n\n  /**\n   * The name or url of the cursor to display when the map is being dragged. This property uses the\n   * css cursor attribute to change the icon. As with the css property, you must specify at least\n   * one fallback cursor that is not a URL. For example:\n   * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  draggingCursor: string;\n\n  /**\n   * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n   * enabled by default.\n   */\n  keyboardShortcuts: boolean = true;\n\n  /**\n   * The enabled/disabled state of the Zoom control.\n   */\n  zoomControl: boolean = true;\n\n  /**\n   * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n   * modes, these styles will only apply to labels and geometry.\n   */\n  styles: MapTypeStyle[] = [];\n\n  /**\n   * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n   * used to\n   * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n   */\n  usePanning: boolean = false;\n\n  /**\n   * The initial enabled/disabled state of the Street View Pegman control.\n   * This control is part of the default UI, and should be set to false when displaying a map type\n   * on which the Street View road overlay should not appear (e.g. a non-Earth map type).\n   */\n  streetViewControl: boolean = true;\n\n  /**\n   * Map option attributes that can change over time\n   */\n  private static _mapOptionsAttributes: string[] = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'zoomControl', 'styles', 'streetViewControl'\n  ];\n\n  private _observableSubscriptions: Subscription[] = [];\n\n  /**\n   * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n   * marker or infoWindow).\n   */\n  mapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  mapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  mapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter is fired when the map center changes.\n   */\n  centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  /**\n   * This event is fired when the viewport bounds have changed.\n   */\n  boundsChange: EventEmitter<LatLngBounds> = new EventEmitter<LatLngBounds>();\n\n  /**\n   * This event is fired when the map becomes idle after panning or zooming.\n   */\n  idle: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(private _elem: ElementRef, private _mapsWrapper: GoogleMapsAPIWrapper) {}\n\n  /** @internal */\n  ngOnInit() {\n    // todo: this should be solved with a new component and a viewChild decorator\n    const container = this._elem.nativeElement.querySelector('.sebm-google-map-container-inner');\n    this._initMapInstance(container);\n  }\n\n  private _initMapInstance(el: HTMLElement) {\n    this._mapsWrapper.createMap(el, {\n      center: {lat: this.latitude, lng: this.longitude},\n      zoom: this.zoom,\n      disableDefaultUI: this.disableDefaultUI,\n      backgroundColor: this.backgroundColor,\n      draggableCursor: this.draggableCursor,\n      draggingCursor: this.draggingCursor,\n      keyboardShortcuts: this.keyboardShortcuts,\n      zoomControl: this.zoomControl,\n      styles: this.styles,\n      streetViewControl: this.streetViewControl\n    });\n    this._handleMapCenterChange();\n    this._handleMapZoomChange();\n    this._handleMapMouseEvents();\n    this._handleBoundsChange();\n    this._handleIdleEvent();\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  /* @internal */\n  ngOnChanges(changes: {[propName: string]: SimpleChange}) {\n    this._updateMapOptionsChanges(changes);\n    if (changes['latitude'] != null || changes['longitude'] != null) {\n      this._updateCenter();\n    }\n  }\n\n  private _updateMapOptionsChanges(changes: {[propName: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys =\n        Object.keys(changes).filter(k => SebmGoogleMap._mapOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._mapsWrapper.setMapOptions(options);\n  }\n\n  /**\n   * Triggers a resize event on the google map instance.\n   * Returns a promise that gets resolved after the event was triggered.\n   */\n  triggerResize(): Promise<void> {\n    // Note: When we would trigger the resize event and show the map in the same turn (which is a\n    // common case for triggering a resize event), then the resize event would not\n    // work (to show the map), so we trigger the event in a timeout.\n    return new Promise<void>((resolve) => {\n      setTimeout(\n          () => { return this._mapsWrapper.triggerMapEvent('resize').then(() => resolve()); });\n    });\n  }\n\n  private _updateCenter() {\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    let newCenter = {\n      lat: this.latitude,\n      lng: this.longitude,\n    };\n    if (this.usePanning) {\n      this._mapsWrapper.panTo(newCenter);\n    } else {\n      this._mapsWrapper.setCenter(newCenter);\n    }\n  }\n\n  private _handleMapCenterChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('center_changed').subscribe(() => {\n      this._mapsWrapper.getCenter().then((center: LatLng) => {\n        this.latitude = center.lat();\n        this.longitude = center.lng();\n        this.centerChange.emit(<LatLngLiteral>{lat: this.latitude, lng: this.longitude});\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleBoundsChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('bounds_changed').subscribe(() => {\n      this._mapsWrapper.getBounds().then((bounds: LatLngBounds) => this.boundsChange.emit(bounds));\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapZoomChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('zoom_changed').subscribe(() => {\n      this._mapsWrapper.getZoom().then((z: number) => this.zoom = z);\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleIdleEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('idle').subscribe(\n        () => { this.idle.emit(void 0); });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapMouseEvents() {\n    interface Emitter {\n      emit(value: any): void;\n    }\n    type Event = {name: string, emitter: Emitter};\n\n    const events: Event[] = [\n      {name: 'click', emitter: this.mapClick},\n      {name: 'rightclick', emitter: this.mapRightClick},\n    ];\n\n    events.forEach((e: Event) => {\n      const s = this._mapsWrapper.subscribeToMapEvent<{latLng: LatLng}>(e.name).subscribe(\n          (event: {latLng: LatLng}) => {\n            const value = <MouseEvent>{coords: {lat: event.latLng.lat(), lng: event.latLng.lng()}};\n            e.emitter.emit(value);\n          });\n      this._observableSubscriptions.push(s);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}