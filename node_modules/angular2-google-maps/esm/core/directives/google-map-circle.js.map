{"version":3,"sources":["core/directives/google-map-circle.ts"],"names":[],"mappings":"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","file":"core/directives/google-map-circle.js","sourcesContent":["import {Directive, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange} from '@angular/core';\nimport {Subscription} from 'rxjs/Subscription';\n\nimport {MouseEvent} from '../events';\nimport {LatLng, LatLngBounds, LatLngLiteral} from '../services/google-maps-types';\nimport {MouseEvent as MapMouseEvent} from '../services/google-maps-types';\nimport {CircleManager} from '../services/managers/circle-manager';\n\n@Directive({\n  selector: 'sebm-google-map-circle',\n  inputs: [\n    'latitude', 'longitude', 'clickable', 'draggable: circleDraggable', 'editable', 'fillColor',\n    'fillOpacity', 'radius', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex'\n  ],\n  outputs: [\n    'centerChange', 'circleClick', 'circleDblclick', 'drag', 'dragEnd', 'dragStart', 'mouseDown',\n    'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'radiusChange', 'rightClick'\n  ]\n})\nexport class SebmGoogleMapCircle implements OnInit,\n    OnChanges, OnDestroy {\n  /**\n   * The latitude position of the circle (required).\n   */\n  latitude: number;\n\n  /**\n   * The clickable position of the circle (required).\n   */\n  longitude: number;\n\n  /**\n   * Indicates whether this Circle handles mouse events. Defaults to true.\n   */\n  clickable: boolean = true;\n\n  /**\n   * If set to true, the user can drag this circle over the map. Defaults to false.\n   */\n  draggable: boolean = false;\n\n  /**\n   * If set to true, the user can edit this circle by dragging the control points shown at\n   * the center and around the circumference of the circle. Defaults to false.\n   */\n  editable: boolean = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended named colors.\n   */\n  fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0.\n   */\n  fillOpacity: number;\n\n  /**\n   * The radius in meters on the Earth's surface.\n   */\n  radius: number = 0;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  strokeOpacity: number;\n\n  /**\n   * The stroke position. Defaults to CENTER.\n   * This property is not supported on Internet Explorer 8 and earlier.\n   */\n  strokePosition: 'CENTER'|'INSIDE'|'OUTSIDE' = 'CENTER';\n\n  /**\n   * The stroke width in pixels.\n   */\n  strokeWeight: number = 0;\n\n  /**\n   * Whether this circle is visible on the map. Defaults to true.\n   */\n  visible: boolean = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  zIndex: number;\n\n  /**\n   * This event is fired when the circle's center is changed.\n   */\n  centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  circleClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  circleDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the circle.\n   */\n  drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the circle.\n   */\n  dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the circle.\n   */\n  dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the circle.\n   */\n  mouseDown: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the circle.\n   */\n  mouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on circle mouseout.\n   */\n  mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on circle mouseover.\n   */\n  mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mouseup event is fired on the circle.\n   */\n  mouseUp: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the circle's radius is changed.\n   */\n  radiusChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * This event is fired when the circle is right-clicked on.\n   */\n  rightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  private _circleAddedToManager: boolean = false;\n\n  private static _mapOptions: string[] = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex'\n  ];\n\n  private _eventSubscriptions: Subscription[] = [];\n\n  constructor(private _manager: CircleManager) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._manager.addCircle(this);\n    this._circleAddedToManager = true;\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._circleAddedToManager) {\n      return;\n    }\n    if (changes['latitude'] || changes['longitude']) {\n      this._manager.setCenter(this);\n    }\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n    if (changes['radius']) {\n      this._manager.setRadius(this);\n    }\n    this._updateCircleOptionsChanges(changes);\n  }\n\n  private _updateCircleOptionsChanges(changes: {[propName: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys =\n        Object.keys(changes).filter(k => SebmGoogleMapCircle._mapOptions.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _registerEventListeners() {\n    let events: Map<string, EventEmitter<any>> = new Map<string, EventEmitter<any>>();\n    events.set('center_changed', this.centerChange);\n    events.set('click', this.circleClick);\n    events.set('dblclick', this.circleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragStart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('radius_changed', this.radiusChange);\n    events.set('rightclick', this.rightClick);\n\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(\n          this._manager.createEventObservable<MapMouseEvent>(eventName, this).subscribe((value) => {\n            switch (eventName) {\n              case 'radius_changed':\n                this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                break;\n              case 'center_changed':\n                this._manager.getCenter(this).then(\n                    (center) =>\n                        eventEmitter.emit(<LatLngLiteral>{lat: center.lat(), lng: center.lng()}));\n                break;\n              default:\n                eventEmitter.emit(\n                    <MouseEvent>{coords: {lat: value.latLng.lat(), lng: value.latLng.lng()}});\n            }\n          }));\n    });\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(function(s: Subscription) { s.unsubscribe(); });\n    this._eventSubscriptions = null;\n  }\n\n  /**\n   * Gets the LatLngBounds of this Circle.\n   */\n  getBounds(): Promise<LatLngBounds> { return this._manager.getBounds(this); }\n\n  getCenter(): Promise<LatLng> { return this._manager.getCenter(this); }\n}\n"],"sourceRoot":"/source/"}