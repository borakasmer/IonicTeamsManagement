{"version":3,"sources":["core/directives/google-map-info-window.ts"],"names":[],"mappings":"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","file":"core/directives/google-map-info-window.js","sourcesContent":["import {Component, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChange} from '@angular/core';\n\nimport {InfoWindowManager} from '../services/managers/info-window-manager';\n\nimport {SebmGoogleMapMarker} from './google-map-marker';\n\nlet infoWindowId = 0;\n\n/**\n * SebmGoogleMapInfoWindow renders a info window inside a {@link SebmGoogleMapMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import {Component} from 'angular2/core';\n * import {SebmGoogleMap, SebmGoogleMapMarker, SebmGoogleMapInfoWindow} from\n * 'angular2-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [SebmGoogleMap, SebmGoogleMapMarker, SebmGoogleMapInfoWindow],\n *  styles: [`\n *    .sebm-google-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <sebm-google-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <sebm-google-map-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <sebm-google-map-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </sebm-google-map-info-window>\n *      </sebm-google-map-marker>\n *    </sebm-google-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'sebm-google-map-info-window',\n  inputs: ['latitude', 'longitude', 'disableAutoPan', 'isOpen'],\n  outputs: ['infoWindowClose'],\n  template: `<div class='sebm-google-map-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `\n})\nexport class SebmGoogleMapInfoWindow implements OnDestroy,\n    OnChanges {\n  /**\n   * The latitude position of the info window (only usefull if you use it ouside of a {@link\n   * SebmGoogleMapMarker}).\n   */\n  latitude: number;\n\n  /**\n   * The longitude position of the info window (only usefull if you use it ouside of a {@link\n   * SebmGoogleMapMarker}).\n   */\n  longitude: number;\n\n  /**\n   * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\n   * visible when it opens.\n   */\n  disableAutoPan: boolean;\n\n  /**\n   * All InfoWindows are displayed on the map in order of their zIndex, with higher values\n   * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\n   * according to their latitude, with InfoWindows of lower latitudes appearing in front of\n   * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\n   */\n  zIndex: number;\n\n  /**\n   * Maximum width of the infowindow, regardless of content's width. This value is only considered\n   * if it is set before a call to open. To change the maximum width when changing content, call\n   * close, update maxWidth, and then open.\n   */\n  maxWidth: number;\n\n  /**\n   * Holds the marker that is the host of the info window (if available)\n   */\n  hostMarker: SebmGoogleMapMarker;\n\n  /**\n   * Holds the native element that is used for the info window content.\n   */\n  content: Node;\n\n  /**\n   * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n   */\n  isOpen: boolean = false;\n\n  /**\n   * Emits an event when the info window is closed.\n   */\n  infoWindowClose: EventEmitter<void> = new EventEmitter<void>();\n\n  private static _infoWindowOptionsInputs: string[] = ['disableAutoPan', 'maxWidth'];\n  private _infoWindowAddedToManager: boolean = false;\n  private _id: string = (infoWindowId++).toString();\n\n  constructor(private _infoWindowManager: InfoWindowManager, private _el: ElementRef) {}\n\n  ngOnInit() {\n    this.content = this._el.nativeElement.querySelector('.sebm-google-map-info-window-content');\n    this._infoWindowManager.addInfoWindow(this);\n    this._infoWindowAddedToManager = true;\n    this._updateOpenState();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._infoWindowAddedToManager) {\n      return;\n    }\n    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n        typeof this.longitude === 'number') {\n      this._infoWindowManager.setPosition(this);\n    }\n    if (changes['zIndex']) {\n      this._infoWindowManager.setZIndex(this);\n    }\n    if (changes['isOpen']) {\n      this._updateOpenState();\n    }\n    this._setInfoWindowOptions(changes);\n  }\n\n  private _updateOpenState() {\n    this.isOpen ? this._infoWindowManager.open(this) : this._infoWindowManager.close(this);\n  }\n\n  private _setInfoWindowOptions(changes: {[key: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys = Object.keys(changes).filter(\n        k => SebmGoogleMapInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._infoWindowManager.setOptions(this, options);\n  }\n\n  /**\n   * Opens the info window.\n   */\n  open(): Promise<void> { return this._infoWindowManager.open(this); }\n\n  /**\n   * Closes the info window.\n   */\n  close(): Promise<void> {\n    return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(void 0); });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'SebmGoogleMapInfoWindow-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n}\n"],"sourceRoot":"/source/"}