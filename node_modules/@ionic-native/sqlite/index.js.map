{"version":3,"sources":["../../../src/@ionic-native/plugins/sqlite/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,eAAA,EAAiB,MAAA,EAAQ,YAAA,EAAc,gBAAA,EAAkB,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AA0CzH;;GAEG;AACH;IAEE,sBAAmB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;IAAI,CAAC;IAS5C,qCAAc,GAAd,UAAe,WAA4C,IAAU,CAAC;IAEtE;;;OAGG;IAKH,kCAAW,GAAX,UAAY,EAAO,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE9C;;;OAGG;IAEH,sCAAe,GAAf,UAAgB,EAAmC,IAAkB,MAAM,CAAC,CAAC,CAAC;IAK9E,2CAAoB,GAApB,cAA+B,CAAC;IAEhC;;OAEG;IAEH,2BAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;OAEG;IAEH,4BAAK,GAAL,cAAwB,MAAM,CAAC,CAAC,CAAC;IAEjC;;;OAGG;IAEH,iCAAU,GAAV,UAAW,SAAiB,EAAE,MAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEpE;;;OAGG;IAEH,+BAAQ,GAAR,UAAS,aAA6C,IAAkB,MAAM,CAAC,CAAC,CAAC;IAKjF,kDAA2B,GAA3B,cAAsC,CAAC;IAEzC,mBAAC;AAAD,CAlEA,AAkEC,IAAA;;AA9DmB;IAAjB,gBAAgB;;sDAAuD;AAEtD;IAAjB,gBAAgB;;6CAAc;AAK/B;IAHC,eAAe,CAAC;QACf,IAAI,EAAE,IAAI;KACX,CAAC;;;;kDACoE;AAUtE;IAJC,eAAe,CAAC;QACf,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;+CAC4C;AAO9C;IADC,eAAe,EAAE;;;;mDAC4D;AAK9E;IAHC,eAAe,CAAC;QACf,IAAI,EAAE,IAAI;KACX,CAAC;;;;wDAC8B;AAMhC;IADC,eAAe,EAAE;;;;wCACc;AAMhC;IADC,eAAe,EAAE;;;;yCACe;AAOjC;IADC,eAAe,EAAE;;;;8CACkD;AAOpE;IADC,eAAe,EAAE;;qCACM,KAAK;;4CAAoD;AAKjF;IAHC,eAAe,CAAC;QACf,IAAI,EAAE,IAAI;KACX,CAAC;;;;+DACqC;AAIzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqCG;AASH,IAAa,MAAM;IAAS,0BAAiB;IAA7C;;IAsCA,CAAC;IApCC;;;;;;;OAOG;IAEH,uBAAM,GAAN,UAAO,MAA4B;QACjC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,UAAC,EAAO,IAAK,OAAA,OAAO,CAAC,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC,EAA7B,CAA6B,EAAE,MAAM,CAAC,CAAC;QACxF,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IAEH,yBAAQ,GAAR,cAA2B,MAAM,CAAC,CAAC,CAAC;IAEpC;;;;OAIG;IAEH,+BAAc,GAAd,UAAe,MAA4B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAQxE,aAAC;AAAD,CAtCA,AAsCC,CAtC2B,iBAAiB,GAsC5C;AANM,iBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,qBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA1BA;IADC,YAAY,EAAE;;;;oCAKd;AAOD;IADC,OAAO,EAAE;;;;sCAC0B;AAQpC;IADC,OAAO,EAAE;;;;4CAC4D;AA9B3D,MAAM;IARlB,MAAM,CAAC;QACN,UAAU,EAAE,QAAQ;QACpB,SAAS,EAAE,cAAc;QACzB,MAAM,EAAE,wBAAwB;QAChC,IAAI,EAAE,uDAAuD;QAC7D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC;KAClD,CAAC;GAEW,MAAM,CAsClB;SAtCY,MAAM","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, CordovaInstance, Plugin, CordovaCheck, InstanceProperty, IonicNativePlugin } from '@ionic-native/core';\r\n\r\ndeclare const sqlitePlugin: any;\r\n\r\nexport interface SQLiteDatabaseConfig {\r\n  /**\r\n   * Name of the database. Example: 'my.db'\r\n   */\r\n  name: string;\r\n  /**\r\n   * Location of the database. Example: 'default'\r\n   */\r\n  location?: string;\r\n  /**\r\n   * iOS Database Location. Example: 'Library'\r\n   */\r\n  iosDatabaseLocation?: string;\r\n  /**\r\n  * support opening pre-filled databases with https://github.com/litehelpers/cordova-sqlite-ext\r\n  */\r\n  createFromLocation?: number;\r\n  /**\r\n   * support encrypted databases with https://github.com/litehelpers/Cordova-sqlcipher-adapter\r\n   */\r\n  key?: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport interface SQLiteTransaction {\r\n  start: () => void;\r\n  executeSql: (sql: any, values: any, success: Function, error: Function) => void;\r\n  addStatement: (sql: any, values: any, success: Function, error: Function) => void;\r\n  handleStatementSuccess: (handler: Function, response: any) => void;\r\n  handleStatementFailure: (handler: Function, response: any) => void;\r\n  run: () => void;\r\n  abort: (txFailure: any) => void;\r\n  finish: () => void;\r\n  abortFromQ: (sqlerror: any) => void;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport class SQLiteObject {\r\n\r\n  constructor(public _objectInstance: any) { }\r\n\r\n  @InstanceProperty databaseFeatures: { isSQLitePluginDatabase: boolean };\r\n\r\n  @InstanceProperty openDBs: any;\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  addTransaction(transaction: (tx: SQLiteTransaction) => void): void { }\r\n\r\n  /**\r\n   * @param fn {any}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance({\r\n    successIndex: 2,\r\n    errorIndex: 1\r\n  })\r\n  transaction(fn: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * @param fn {Function}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  readTransaction(fn: (tx: SQLiteTransaction) => void): Promise<any> { return; }\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  startNextTransaction(): void { }\r\n\r\n  /**\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  open(): Promise<any> { return; }\r\n\r\n  /**\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  close(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Execute SQL on the opened database. Note, you must call `create` first, and\r\n   * ensure it resolved and successfully opened the database.\r\n   */\r\n  @CordovaInstance()\r\n  executeSql(statement: string, params: any): Promise<any> { return; }\r\n\r\n  /**\r\n   * @param sqlStatements {Array<string | string[] | any>}\r\n   * @returns {Promise<any>}\r\n   */\r\n  @CordovaInstance()\r\n  sqlBatch(sqlStatements: Array<string | string[] | any>): Promise<any> { return; }\r\n\r\n  @CordovaInstance({\r\n    sync: true\r\n  })\r\n  abortallPendingTransactions(): void { }\r\n\r\n}\r\n\r\n/**\r\n * @name SQLite\r\n *\r\n * @description\r\n * Access SQLite databases on the device.\r\n *\r\n * @usage\r\n *\r\n * ```typescript\r\n * import { SQLite, SQLiteObject } from '@ionic-native/sqlite';\r\n *\r\n * constructor(private sqlite: SQLite) { }\r\n *\r\n * ...\r\n *\r\n * this.sqlite.create({\r\n *   name: 'data.db',\r\n *   location: 'default'\r\n * })\r\n *   .then((db: SQLiteObject) => {\r\n *\r\n *\r\n *     db.executeSql('create table danceMoves(name VARCHAR(32))', {})\r\n *       .then(() => console.log('Executed SQL'))\r\n *       .catch(e => console.log(e));\r\n *\r\n *\r\n *   })\r\n *   .catch(e => console.log(e));\r\n *\r\n * ```\r\n *\r\n * @classes\r\n * SQLiteObject\r\n * @interfaces\r\n * SQLiteDatabaseConfig\r\n * SQLiteTransaction\r\n */\r\n@Plugin({\r\n  pluginName: 'SQLite',\r\n  pluginRef: 'sqlitePlugin',\r\n  plugin: 'cordova-sqlite-storage',\r\n  repo: 'https://github.com/litehelpers/Cordova-sqlite-storage',\r\n  platforms: ['Android', 'iOS', 'macOS', 'Windows']\r\n})\r\n\r\nexport class SQLite extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Open or create a SQLite database file.\r\n   *\r\n   * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database\r\n   *\r\n   * @param config {SQLiteDatabaseConfig} database configuration\r\n   * @return Promise<SQLiteObject>\r\n   */\r\n  @CordovaCheck()\r\n  create(config: SQLiteDatabaseConfig): Promise<SQLiteObject> {\r\n    return new Promise((resolve, reject) => {\r\n      sqlitePlugin.openDatabase(config, (db: any) => resolve(new SQLiteObject(db)), reject);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Verify that both the Javascript and native part of this plugin are installed in your application\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  echoTest(): Promise<any> { return; }\r\n\r\n  /**\r\n   * Deletes a database\r\n   * @param config {SQLiteDatabaseConfig} database configuration\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  deleteDatabase(config: SQLiteDatabaseConfig): Promise<any> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}